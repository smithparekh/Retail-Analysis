CREATE DATABASE RETAILS;
USE RETAILS;
use schema PUBLIC;

CREATE OR REPLACE TABLE demographic_RAW
(AGE_DESC	CHAR(20),
MARITAL_STATUS_CODE	CHAR(5),
INCOME_DESC	VARCHAR(40),
HOMEOWNER_DESC	VARCHAR(40),
HH_COMP_DESC	VARCHAR(50),
HOUSEHOLD_SIZE_DESC	VARCHAR(50),
KID_CATEGORY_DESC	VARCHAR(40),
household_key INT PRIMARY KEY
);

CREATE OR REPLACE TABLE CAMPAIGN_DESC_RAW
(DESCRIPTION CHAR(10),	
CAMPAIGN	INT ,
START_DAY	INT,
END_DAY INT,
PRIMARY KEY (DESCRIPTION),
UNIQUE (CAMPAIGN));




CREATE OR REPLACE TABLE CAMPAIGN_RAW
(DESCRIPTION	CHAR(10) ,
household_key	INT,
CAMPAIGN INT,
FOREIGN KEY (DESCRIPTION) references CAMPAIGN_DESC_RAW(DESCRIPTION) ,
FOREIGN KEY (CAMPAIGN) references CAMPAIGN_DESC_RAW(CAMPAIGN),
FOREIGN KEY (household_key) references demographic_RAW(household_key)
);

CREATE OR REPLACE TABLE PRODUCT_RAW
(PRODUCT_ID	INT PRIMARY KEY,
MANUFACTURER 	INT,
DEPARTMENT	VARCHAR(50),
BRAND	VARCHAR(30),
COMMODITY_DESC	VARCHAR(65),
SUB_COMMODITY_DESC VARCHAR(65)	,
CURR_SIZE_OF_PRODUCT VARCHAR(15)
);


CREATE OR REPLACE TABLE COUPON_RAW
(COUPON_UPC	INT,
PRODUCT_ID	INT,
CAMPAIGN INT,
FOREIGN KEY (PRODUCT_ID) references PRODUCT_RAW(PRODUCT_ID),
FOREIGN KEY (CAMPAIGN) references CAMPAIGN_DESC_RAW(CAMPAIGN)
);


CREATE OR REPLACE TABLE COUPON_REDEMPT_RAW
(household_key	INT,
DAY	INT,
COUPON_UPC	INT,
CAMPAIGN INT,
FOREIGN KEY (household_key) references demographic_RAW(household_key),
FOREIGN KEY (CAMPAIGN) references CAMPAIGN_DESC_RAW(CAMPAIGN)
);

CREATE OR REPLACE TABLE TRANSACTION_RAW 
(household_key	INT,
BASKET_ID	INT,
DAY	INT,
PRODUCT_ID	INT,
QUANTITY	INT,
SALES_VALUE	FLOAT,
STORE_ID	INT,
RETAIL_DISC	FLOAT,
TRANS_TIME	INT,
WEEK_NO	INT,
COUPON_DISC	INT,
COUPON_MATCH_DISC INT,
FOREIGN KEY (PRODUCT_ID) references PRODUCT_RAW(PRODUCT_ID),
FOREIGN KEY (household_key) references demographic_RAW(household_key)
);

----------------------------------------------------AWS (S3) INTEGRATION------------------------------------------------------------------------
CREATE OR REPLACE STORAGE integration s3_int
TYPE = EXTERNAL_STAGE
STORAGE_PROVIDER = S3
ENABLED = TRUE
STORAGE_AWS_ROLE_ARN ='arn:aws:iam::098678939641:role/RETAIL_ROLES' 
STORAGE_ALLOWED_LOCATIONS =('s3://retaildatarawbucket/');

DESC integration s3_int;


CREATE OR REPLACE STAGE RETAIL
URL ='s3://retaildatarawbucket'
file_format = DATA
storage_integration = s3_int;

LIST @RETAIL;

--CREATE SNOWPIPE THAT RECOGNISES CSV THAT ARE INGESTED FROM EXTERNAL STAGE AND COPIES THE DATA INTO EXISTING TABLE

--The AUTO_INGEST=true parameter specifies to read 
--- event notifications sent from an S3 bucket to an SQS queue when new data is ready to load.


CREATE OR REPLACE PIPE RETAIL_SNOWPIPE_DEMOGRAPHIC AUTO_INGEST = TRUE AS
COPY INTO "RETAIL"."PUBLIC"."DEMOGRAPHIC_RAW" --yourdatabase -- your schema ---your table
FROM '@RETAIL/DEMOGRAPHIC/' --s3 bucket subfolde4r name
FILE_FORMAT = DATA; --YOUR CSV FILE FORMAT NAME

CREATE OR REPLACE PIPE RETAIL_SNOWPIPE_CAMPAIGN_DESC AUTO_INGEST = TRUE AS
COPY INTO "RETAIL"."PUBLIC"."CAMPAIGN_DESC_RAW"
FROM '@RETAIL/CAMPAIGN_DESC/' 
FILE_FORMAT = DATA;

CREATE OR REPLACE PIPE RETAIL_SNOWPIPE_CAMPAIGN AUTO_INGEST = TRUE AS
COPY INTO "RETAIL"."PUBLIC"."CAMPAIGN_RAW"
FROM '@RETAIL/CAMPAIGN/' 
FILE_FORMAT = DATA;

CREATE OR REPLACE PIPE RETAIL_SNOWPIPE_PRODUCT AUTO_INGEST = TRUE AS
COPY INTO "RETAIL"."PUBLIC"."PRODUCT_RAW"
FROM '@RETAIL/PRODUCT/' 
FILE_FORMAT = DATA;


CREATE OR REPLACE PIPE RETAIL_SNOWPIPE_COUPON AUTO_INGEST = TRUE AS
COPY INTO "RETAIL"."PUBLIC"."COUPON_RAW"
FROM '@RETAIL/COUPON/' 
FILE_FORMAT = DATA;

CREATE OR REPLACE PIPE RETAIL_SNOWPIPE_COUPON_REDEMPT  AUTO_INGEST = TRUE AS
COPY INTO "RETAIL"."PUBLIC"."COUPON_REDEMPT_RAW"
FROM '@RETAIL/COUPON_REDEMPT/' 
FILE_FORMAT = DATA;

CREATE OR REPLACE PIPE RETAIL_SNOWPIPE_TRANSACTION  AUTO_INGEST = TRUE AS
COPY INTO "RETAIL"."PUBLIC"."TRANSACTION_RAW"
FROM '@RETAIL/TRANSACTION/' 
FILE_FORMAT = DATA;

SHOW PIPES;

SELECT COUNT(*) FROM demographic_RAW;
SELECT COUNT(*) FROM CAMPAIGN_DESC_RAW;
SELECT COUNT(*) FROM CAMPAIGN_RAW;
SELECT COUNT(*) FROM PRODUCT_RAW;
SELECT COUNT(*) FROM COUPON_RAW;
SELECT COUNT(*) FROM COUPON_REDEMPT_RAW;
SELECT COUNT(*)  FROM TRANSACTION_RAW;

----------------------------------------------------------PIPEREFRESH-----------------------------------------------------------------

ALTER PIPE RETAIL_SNOWPIPE_DEMOGRAPHIC refresh;
ALTER PIPE  RETAIL_SNOWPIPE_CAMPAIGN_DESC refresh;
ALTER PIPE  RETAIL_SNOWPIPE_CAMPAIGN refresh;
ALTER PIPE  RETAIL_SNOWPIPE_PRODUCT refresh;
ALTER PIPE  RETAIL_SNOWPIPE_COUPON refresh;
ALTER PIPE  RETAIL_SNOWPIPE_COUPON_REDEMPT refresh;
ALTER PIPE  RETAIL_SNOWPIPE_TRANSACTION refresh;



SELECT * FROM RETAIL.PUBLIC.DEMOGRAPHIC_RAW;
SELECT * FROM RETAIL.PUBLIC.CAMPAIGN_DESC_NEW;

SELECT COUNT(*) FROM RETAIL.PUBLIC.CAMPAIGN_DESC_RAW;
SELECT * FROM RETAIL.PUBLIC.CAMPAIGN_RAW;
SELECT * FROM RETAIL.PUBLIC.COUPON_RAW;
SELECT * FROM RETAIL.PUBLIC.PRODUCT_RAW;
SELECT * FROM RETAIL.PUBLIC.COUPON_REDEMPT_RAW;
SELECT COUNT(*) FROM RETAIL.PUBLIC.TRANSACTION_RAW;

select * from  RETAIL.PUBLIC.TRANSACTION_NEW;
select * from RETAIL.PUBLIC.COUPON_REDMPT_NEW;


-----------------------------===================Demographics KPIs=================-----------------------------------------
--Count of unique households: Measure the total number of unique households in
--the Demographic table.
select count(distinct(HOUSEHOLD_KEY)) FROM RETAIL.PUBLIC.DEMOGRAPHIC_RAW;

-- Household composition distribution: Analyze the distribution of household
-- compositions (HH_COMP_DESC) to understand the composition of households.
SELECT HH_COMP_DESC, COUNT(*) AS CompositionCount
FROM RETAIL.PUBLIC.DEMOGRAPHIC_RAW
GROUP BY HH_COMP_DESC
ORDER BY CompositionCount DESC;
--Age distribution: Calculate the percentage or count of customers in different age
--groups (AGE_DESC).

SELECT AGE_DESC,TOTAL_HOUSEHOLDS,ROUND(TOTAL_HOUSEHOLDS/2500 * 100,2) AS PERC_AGEWISE_HOUSEHOLDS_DISTR
FROM
(SELECT AGE_DESC,
COUNT(DISTINCT HOUSEHOLD_KEY) AS TOTAL_HOUSEHOLDS
FROM demographic_RAW 
GROUP BY 1
ORDER BY 2 DESC)
GROUP BY 1,2;

--Marital status distribution: Analyze the proportion of customers in different
--marital status categories (MARITAL_STATUS_CODE).

SELECT MARITAL_STATUS_CODE , 
COUNT(DISTINCT HOUSEHOLD_KEY) AS TOTAL_HOUSEHOLDS,
ROUND(COUNT(DISTINCT HOUSEHOLD_KEY) / 2500 * 100 , 2) AS PERC_MARITAL_HOUSEHOLDS_DISTR
FROM demographic_RAW
GROUP BY 1
ORDER BY 2 DESC;

--Income distribution: Determine the distribution of customers across income levels
--(INCOME_DESC).

SELECT INCOME_DESC , 
COUNT(DISTINCT HOUSEHOLD_KEY) AS TOTAL_HOUSEHOLDS,
ROUND(COUNT(DISTINCT HOUSEHOLD_KEY) / 2500 * 100 , 2) AS PERC_INCOME_HOUSEHOLDS_DISTR
FROM demographic_RAW
GROUP BY 1
ORDER BY 2 DESC;

--Homeownership distribution: Calculate the percentage or count of customers who
--own or rent their homes (HOMEOWNER_DESC).
SELECT HOMEOWNER_DESC , 
COUNT(DISTINCT HOUSEHOLD_KEY) AS TOTAL_HOUSEHOLDS,
ROUND(COUNT(DISTINCT HOUSEHOLD_KEY) / 2500 * 100 , 2) AS PERC_HOMEOWNER_DESC_DISTR
FROM demographic_RAW
GROUP BY 1
ORDER BY 2 DESC;

---------------------============== Campaign KPIs =================------------------
--Number of campaigns: Count the total number of campaigns in the Campaign table.

SELECT DESCRIPTION,COUNT(CAMPAIGN) 
FROM RETAIL.PUBLIC.CAMPAIGN_DESC_NEW
GROUP BY DESCRIPTION
ORDER BY DESCRIPTION;

--Campaign duration: Calculate the duration of each campaign by subtracting the
--start day from the end day (in the Campaign_desc table).
SELECT DURATION_DAYS FROM RETAIL.PUBLIC.CAMPAIGN_DESC_NEW

--Campaign effectiveness: Analyze the number of households associated with each
--campaign (in the Campaign table) to measure campaign reach.
SELECT DESCRIPTION, count(HOUSEHOLD_KEY) COUNT_OF_HOUSEHOLD  FROM
RETAIL.PUBLIC.CAMPAIGN_RAW
GROUP BY DESCRIPTION
ORDER BY COUNT_OF_HOUSEHOLD DESC;

---------------------------===================Coupon KPIs:===========-------------
--Coupon redemption rate: Calculate the percentage of coupons redeemed (from the
--coupon_redempt table) compared to the total number of coupons distributed (from
--the Coupon table).
-- Create or replace the stored procedure
CREATE OR REPLACE PROCEDURE COUPON_PERC()
  RETURNS STRING
  LANGUAGE SQL
AS
$$
-- Begin the stored procedure
BEGIN
  SELECT (TOTAL_COUPON_REDEEM / TOTAL_COUPON) * 100 AS PERC_COUPON_REDEEMS, CAMPAIGN
  FROM (
    SELECT COUNT(DISTINCT N.COUPON_UPC) AS TOTAL_COUPON_REDEEM, W.CAMPAIGN,
           COUNT(DISTINCT W.COUPON_UPC) AS TOTAL_COUPON
    FROM COUPON_REDMPT_NEW N
    LEFT OUTER JOIN COUPON_RAW W ON N.CAMPAIGN = W.CAMPAIGN
    GROUP BY W.CAMPAIGN
  )
  ORDER BY CAMPAIGN;
-- End the stored procedure
END;
$$;

--Coupon usage by campaign: Measure the number of coupon redemptions (from
--the coupon_redempt table) for each campaign (in the Coupon table).

SELECT COUNT(DISTINCT(N.COUPON_UPC)) UNIQUE_COUPON, W.CAMPAIGN FROM 
COUPON_REDMPT_NEW N
LEFT OUTER JOIN
COUPON_RAW W ON N.CAMPAIGN = W.CAMPAIGN
GROUP BY W.CAMPAIGN
ORDER BY W.CAMPAIGN;

--Sales value: Calculate the total sales value for each product (in the
--Transaction_data table) to identify top-selling products.

SELECT SUM(N.SALES_VALUE) AS TOTAL_SALES ,W.COMMODITY_DESC
FROM TRANSACTION_NEW N
LEFT OUTER JOIN PRODUCT_RAW W
ON W.PRODUCT_ID = N.PRODUCT_ID
GROUP BY W.COMMODITY_DESC
ORDER BY W.COMMODITY_DESC

--Manufacturer distribution: Analyze the distribution of products across different
--manufacturers (in the Product table).
SELECT COUNT(DISTINCT(PRODUCT_ID)) AS PROD_COUNT_MANU,MANUFACTURER FROM PRODUCT_RAW
GROUP BY MANUFACTURER
ORDER BY  MANUFACTURER;

--Department-wise sales: Measure the sales value by department (in the Product
--table) to understand which departments contribute most to revenue.

SELECT SUM(N.SALES_VALUE) AS TOTAL_SALES_BY_DEPT ,W.DEPARTMENT
FROM TRANSACTION_NEW N
LEFT OUTER JOIN PRODUCT_RAW W
ON W.PRODUCT_ID = N.PRODUCT_ID
GROUP BY W.DEPARTMENT
ORDER BY W.DEPARTMENT DESC

--Brand-wise sales: Calculate the sales value for each brand (in the Product table) to
--identify top-selling brands.


SELECT SUM(N.SALES_VALUE) AS TOTAL_SALES_BY_BRAND ,W.BRAND
FROM TRANSACTION_NEW N
LEFT OUTER JOIN PRODUCT_RAW W
ON W.PRODUCT_ID = N.PRODUCT_ID
GROUP BY W.BRAND
ORDER BY W.BRAND DESC;

-----------------==============Transaction KPIs

--Total sales value: Calculate the sum of sales values (in the Transaction_data table)
--to measure overall revenue.

SELECT SUM(SALES_VALUE) AS TOTAL_REV FROM RETAIL.PUBLIC.TRANSACTION_NEW;

--Average transaction value: Calculate the average sales value per transaction to
--understand customer spending patterns.
SELECT  DISTINCT HOUSEHOLD_KEY,AVG(SALES_VALUE) AVG_SPEND  FROM RETAIL.PUBLIC.TRANSACTION_NEW
GROUP BY HOUSEHOLD_KEY
ORDER BY AVG_SPEND DESC

--Quantity sold: Measure the total quantity sold (in the Transaction_data table) to
--understand product demand.
SELECT DISTINCT PRODUCT_ID , SUM(QUANTITY) TOTAL_QYT_PROD FROM RETAIL.PUBLIC.TRANSACTION_NEW
GROUP BY PRODUCT_ID
ORDER BY TOTAL_QYT_PROD DESC

--Discounts: Analyze the amount and impact of discounts (RETAIL_DISC,
--COUPON_DISC, COUPON_MATCH_DISC) on sales value.

SELECT DISTINCT RETAIL_DISC,COUPON_DISC,COUPON_MATCH_DISC , SUM(SALES_VALUE) DISCOUNT FROM RETAIL.PUBLIC.TRANSACTION_NEW
GROUP BY RETAIL_DISC,COUPON_DISC,COUPON_MATCH_DISC
ORDER BY DISCOUNT DESC


-----------------================ . Descriptive Analysis:


--Explore demographic characteristics such as age distribution, marital
--status, income levels, homeownership, household composition,
--household size, and kid categories.
--Analyze campaign descriptions and duration.
--Examine product details including manufacturer, department, brand,
--commodity description, sub-commodity description, and size.

SELECT T.HOUSEHOLD_KEY,D.AGE_DESC,D.MARITAL_STATUS_CODE,D.INCOME_DESC,AVG(T.SALES_VALUE)AS AVG_AMOUNT,
AVG(T.RETAIL_DISC)AS AVG_RETAIL_DIS,AVG(T.COUPON_DISC)AS AVG_COUPON_DISC,AVG(T.COUPON_MATCH_DISC)AS AVG_COUP_MATCH_DISC
FROM TRANSACTION_NEW T
LEFT OUTER JOIN demographic_RAW D ON T.HOUSEHOLD_KEY =D.HOUSEHOLD_KEY
GROUP BY 1,2,3,4
ORDER BY 1;

-------------==========================Master Table============------------------
CREATE OR REPLACE TABLE Retail_MASTER_TABLE AS
SELECT
    D.HOUSEHOLD_KEY AS DEMOGRAPHIC_HOUSEHOLD_KEY,D.AGE_DESC,D.HH_COMP_DESC,D.HOMEOWNER_DESC,D.HOUSEHOLD_SIZE_DESC,
    D.INCOME_DESC,D.KID_CATEGORY_DESC,D.MARITAL_STATUS_CODE,
   TN.BASKET_ID,TN.COUPON_DISC,TN.COUPON_MATCH_DISC,TN.DATE,TN.QUANTITY,TN.RETAIL_DISC,TN.SALES_VALUE,
    TN.STORE_ID,TN.TRANS_TIME,
    CP.CAMPAIGN,CP.DESCRIPTION,
    CRN.COUPON_UPC,
    CDN.DURATION_DAYS,CDN.END_DATE,CDN.END_MONTH,CDN.END_YEAR,CDN.START_DATE,
    CDN.START_MONTH,CDN.START_YEAR,
    CR.PRODUCT_ID,
    P.BRAND,P.COMMODITY_DESC,P.CURR_SIZE_OF_PRODUCT,P.DEPARTMENT,P.MANUFACTURER,P.SUB_COMMODITY_DESC
FROM DEMOGRAPHIC_RAW D
LEFT OUTER JOIN TRANSACTION_NEW TN ON D.HOUSEHOLD_KEY = TN.HOUSEHOLD_KEY
LEFT OUTER JOIN CAMPAIGN_RAW CP ON D.HOUSEHOLD_KEY = CP.HOUSEHOLD_KEY
LEFT OUTER JOIN COUPON_REDMPT_NEW CRN ON D.HOUSEHOLD_KEY = CRN.HOUSEHOLD_KEY
LEFT OUTER JOIN CAMPAIGN_DESC_NEW CDN ON CRN.CAMPAIGN = CDN.CAMPAIGN
LEFT OUTER JOIN COUPON_RAW CR ON CDN.CAMPAIGN = CR.CAMPAIGN
LEFT OUTER JOIN PRODUCT_RAW P ON CR.PRODUCT_ID = P.PRODUCT_ID ;
